from tkinter import *
import random
import os.path
import base64
from PIL import Image, ImageTk
import time
import math
root=Tk()
sol={}
blank=Frame(root, bg='gray1')
blank.grid(row=0,column=0)
with open('dilly dilly.jpg','wb') as wf:
    pic=base64.b64decode(b'')
    wf.write(pic)

class imgs:
    image=Image.open('jpgs/planet100.jpg')
    planet99=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet95.jpg')
    planet95=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet90.jpg')
    planet90=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet85.jpg')
    planet85=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet80.jpg')
    planet80=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet75.jpg')
    planet75=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet70.jpg')
    planet70=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet50.jpg')
    planet50=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet50full.jpg')
    planet50full=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet25.jpg')
    planet25=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet25full.jpg')
    planet25full=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet20.jpg')
    planet20=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet20full.jpg')
    planet20full=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet15.jpg')
    planet15=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/planet15full.jpg')
    planet15full=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/black.jpg')
    blank=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/terra45.jpg')
    terra45=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/astroids1.jpg')
    astroids1=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/galaxy1.jpg')
    galaxy1=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/blankslot.jpg')
    blankslot=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/Harray.jpg')
    Harray=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/Tarray.jpg')
    Tarray=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/Hbase.jpg')
    Hbase=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/Tbase.jpg')
    Tbase=ImageTk.PhotoImage(image)
    image=Image.open('jpgs/Fbase.jpg')
    Fbase=ImageTk.PhotoImage(image)

image=Image.open('jpgs/sun.jpg')
size=(800,800)
image=image.resize(size)
sunpic=ImageTk.PhotoImage(image)



root.title('Terra To Infinity')
root.geometry('1500x900')
root.resizable(False,False)
root.configure(bg='gray1')

class info:
    harvest=0
    page='mainmenu'
    materials=50
    astroids=8
    t=1
    LSC=False
    currentpage='menu'
def terraform(p):
    info.materials=info.materials-500
    exec('sol[1].p'+str(p)+'size=str(sol[1].p'+str(p)+'size)+"t"')
    info.t=info.t+1
    screenwrite()

def nothing():
    pass
def build(grandparent,parent,thing):
    if thing==0:
        thing='imgs.Harray'
        info.harvest=info.harvest+1
        info.materials=info.materials-10
    elif thing==1:
        thing='imgs.Tarray'
        info.materials=info.materials-50
    elif thing==2:
        thing='imgs.Hbase'
        info.harvest=info.harvest+5
        info.materials=info.materials-50
    elif thing==3:
        thing='imgs.Tbase'
        info.materials=info.materials-500
    elif thing==4:
        thing='imgs.Fbase'
        info.materials=info.materials-1000
    string=grandparent+'.b'+str(parent)+'.destroy()'
    exec(string)
    string2=grandparent+'.b'+str(parent)+"= Button(frame1, relief=FLAT, bg='goldenrod',fg='gray80',image="+thing+",width=100,height=100, command= nothing)"
    exec(string2)
    string2=grandparent+'.b'+str(parent)+".grid(row=rowset(int(parent)),column=columnset(int(parent)))"
    exec(string2)
    sparent=grandparent.replace('.','_')
    sparent=sparent.replace('[','_')
    sparent=sparent.replace(']','_')
    string3="info."+sparent+'b'+str(parent)+"image="+thing
    exec(string3)


def sb(parent,p):
    parent=str(parent.name)
    m= Menu(frame1,tearoff=0)
    buildmenu=Menu(m,tearoff=0)
    if p==13:
        if info.materials>=50:
            buildmenu.add_command(label='harvesting base(50M)', command=lambda: build(parent,int(p),2))
        else:
            buildmenu.add_command(label='requires 50M',)
        if info.materials>=500:
            buildmenu.add_command(label='terraforming base(500M)', command= lambda: build(parent,int(p),3))
        else:
            buildmenu.add_command(label='requires 500M',)
        if info.materials>=1000:
            buildmenu.add_command(label='rocket fabrication base(1000M)', command= lambda: build(parent,int(p),4))
        else:
            buildmenu.add_command(label='requires 1000M',)
    else:
        if info.materials>=10:
            buildmenu.add_command(label='harvesting array(10M)',command=lambda: build(parent,int(p),0))
        else:
            buildmenu.add_command(label='requires 10M',)
        if info.materials>=50:
            buildmenu.add_command(label='terraforming array(50M)', command= lambda: build(parent,int(p),1))
        else:
            buildmenu.add_command(label='requires 50M',)
    m.add_cascade(label='build',menu=buildmenu)
    string1=parent+'.b'+str(p)+'.winfo_rootx()'
    posx=eval(string1)
    string2=parent+'.b'+str(p)+'.winfo_rooty()'
    posy=eval(string2)
    offset=100
    posy=posy+offset
    m.post(posx,posy)
def columnset(x):
    if x<=3:
        return int(x-1)
    elif x<=6:
        return int(x)
    elif x<=9:
        return int(x-7)
    elif x<=12:
        return int(x-6)
    else:
        return 3

def rowset(x):
    if x<=3:
        return int(3-x)
    elif x<=6:
        return int(x-4)
    elif x<=9:
        return int(x-3)

    elif x<=12:
        return int(16-x)
    else:
        return 3

def makeslot(parent,name,val):
    global frame1
    sparent=parent.replace('.','_')
    sparent=sparent.replace('[','_')
    sparent=sparent.replace(']','_')
    string1=parent+'.b'+str(name)+"= Button(frame1, relief=FLAT, bg='goldenrod',fg='gray80',image=info."+sparent+"b"+name+"image,width=100,height=100, command= lambda: sb("+str(parent)+","+str(val)+"))"
    exec(string1)
    string2=parent+'.b'+str(name)+".grid(row=rowset(val),column=columnset(val))"
    exec(string2)

class Planet:
    def __init__(self,system,size,name):
        self.system=system
        self.size=size
        self.name=name

    def build(self):
        global frame1
        global blank
        frame1=Frame(blank,bg='gray1')
        frame1.grid(row=1,column=0)
        x=1
        slots=13
        parent=str(self.name)
        string="self.planetpic=Label(frame1,bg='gray1',image=imgs.planet"+str(self.size)+"full,height=800,width=800)"
        exec(string)
        self.planetpic.grid(row=0,column=3,rowspan=8)
        while x<=slots:
            val=x
            name=str(x)
            sparent=parent.replace('.','_')
            sparent=sparent.replace('[','_')
            sparent=sparent.replace(']','_')
            try:
                string="x=info."+sparent+"b"+str(val)+"image"
                exec(string)
            except:
                string="info."+sparent+"b"+str(val)+"image=imgs.blankslot"
                exec(string)
            makeslot(parent,name,val)
            x=x+1
def research(x):
    info.LSC=True
    info.materials=info.materials-500

def bigbuild(x):
    info.harvest=info.harvest+100
    info.materials=info.materials-1000
def harvestedcheck(x):
    try:
        x=int(x)
    except ValueError:
        return False
    else:
        return True

def sizeparse(x):
    do=harvestedcheck(x)
    if do==False:
        size=int(str(x[0]+x[1]))
    else:
        size=x
    return size

def pb(p):
    P=sizeparse(p)
    Psize=eval('sol[1].p'+str(p+1)+'size')
    Psize=sizeparse(Psize)
    if Psize<=35:
        info.currentpage='planet'
        screenwrite()
        string='sol[1].P'+str(P)+'.build()'
        exec(string)
    else:
        string='sol[1].B'+str(p+1)+'.winfo_rootx()'
        posx=eval(string)
        posx=posx-100
        string2='sol[1].B'+str(p+1)+'.winfo_rooty()'
        posy=eval(string2)
        string3='sol[1].p'+str(p+1)+'size'
        offset=eval(string3)
        extant=harvestedcheck(offset)
        offset=str(offset)
        m= Menu(frame1,tearoff=0)
        buildmenu=Menu(m,tearoff=0)
        researchmenu=Menu(m,tearoff=0)
        if info.materials>=500:
            researchmenu.add_command(label='Large scale construction',command=lambda: research(0))
        else:
            researchmenu.add_command(label='requires 500 M')
        if info.LSC==True:
            if "t" in offset:
                pass
            elif 'a' in offset:
                if info.materials>=1000:
                    buildmenu.add_command(label='belt harvesting system',command= lambda: bigbuild(0))
                else:
                    buildmenu.add_command(label='requires 1000 M')
            else:
                if info.materials>=1000:
                    buildmenu.add_command(label='orbital harvesting sphere',command= lambda: bigbuild(0))
                else:
                    buildmenu.add_command(label='requires 1000 M')
        else:
            buildmenu.add_command(label='requires research')
        if "t" in offset:
            m.add_cascade(label="research",menu=researchmenu)
        else:
            m.add_cascade(label="build", menu=buildmenu)
        if extant==False:
            if 't' in offset:
                offset=45
            elif 'a' in offset:
                offset=0
        posy=posy+int(offset)
        m.post(posx,posy)



def systemBuild(s,name,size,val):
    global frame1
    extant=harvestedcheck(size)
    if extant==False:
        if 'h'in size:
            size=int(size[0]+size[1])
            string= "sol[1]."+str(name)+"= Button(frame1, borderwidth=0, state=DISABLED, relief=FLAT, bg='gray1',fg='gray1',image=imgs.blank,width="+(str(size))+",height="+(str(size))+",command= lambda: pb("+str(val)+"))"
            exec(string)
            string2="sol[1]."+str(name)+".grid(row=2,column=int(val+2),padx=int((100-size)/2))"
            exec(string2)
            size=str(str(size)+"h")
        if 't'in size:
            size=45
            string= "sol[1]."+str(name)+"= Button(frame1, borderwidth=0, relief=FLAT, bg='gray1',fg='gray1',image=imgs.terra45,width="+(str(size))+",height="+(str(size))+",command= lambda: pb("+str(val)+"))"
            exec(string)
            string2="sol[1]."+str(name)+".grid(row=2,column=int(val+2),padx=int((100-size)/2))"
            exec(string2)
            size=str(str(size)+"t")
        if 'a'in size:
            size=50
            string= "sol[1]."+str(name)+"= Button(frame1, borderwidth=0, relief=FLAT, bg='gray1',fg='gray1',image=imgs.astroids1,width="+(str(size))+",height=800,command= lambda: pb("+str(val)+"))"
            exec(string)
            string2="sol[1]."+str(name)+".grid(row=0,rowspan=5,column=int(val+2),padx=25)"
            exec(string2)
            size=str(str(size)+"a")
    else:
        string= "sol[1]."+str(name)+"= Button(frame1, borderwidth=0, relief=FLAT, bg='gray1',fg='gray1',image=imgs.planet"+str(size)+",width="+(str(size))+",height="+(str(size))+",command= lambda: pb("+str(val)+"))"
        exec(string)
        string2="sol[1]."+str(name)+".grid(row=2,column=int(val+2),padx=int((100-size)/2))"
        exec(string2)
def menub(b):
    if b==0:
        sol[1]=solar(15,20,'45t',25,'99a',99,95,80,75,'99a')
        info.currentpage='solar'
        screenwrite()
    elif b==1:
        makenew=os.path.isfile('TTI.txt')
        if makenew==False:
            sol[1]=solar(15,20,'45t',25,'99a',99,95,80,75,'99a')
            info.currentpage='solar'
            screenwrite()
        else:
            with open('TTI.txt','r') as rf:
                contents=rf.readline()
                exec('sol[1]=solar('+str(contents)+')')
            info.currentpage='solar'
            screenwrite()
    elif b==2:
        global blank
        info.currentpage='tutorial'
        screenwrite()
        info.currentpage='menu'
        tutorial='Welcome to Terra to Infinity. This game is very simple, click on a planet to pull up the options for the planet and choose an option.\n\nThe Goal is to terraform as many planets as possible, and to defend them from ELEs and aliens.\n\nTo begin with you simply need to collect materials. After you have collected enough you can terraform a planet.\n\nAs it develops you will research new technologies and expand out into the galaxy. \n\nContinue to check back for new updates.'
        centerinator=Label(blank,bg='gray1',image=imgs.blank,height=200,width=1500)
        centerinator.grid(row=0,column=0,columnspan=3)
        textbox=Label(blank,bg='gray1',fg='goldenrod', text=tutorial,height=10, font=("Times", 18, "bold"))
        textbox.grid(row=1,column=1, padx=50, pady=10)
        back=Button(blank, relief=FLAT, bg='gray1', fg='goldenrod', text='back',font=("Times", 15, "bold"),width=10, padx=50, pady=10,command= lambda:screenwrite())
        back.grid(row=2,column=1)

def savegame():
    global sol
    worlds=len(sol)
    x=1
    while x<=worlds:
        with open('TTI.txt','w') as wf:
            wf.write(sol[x].savevalue)
        x=x+1


class mainmenu:
    def build():
        global blank
        frame1=Frame(blank,bg='gray1')
        frame1.grid(row=0,column=0)
        menu1=Frame(frame1,bg='gray1',width=1500,height=800)
        menu1.grid(row=2,column=0)
        newb= Button(menu1, relief=FLAT, bg='gray1', fg='goldenrod', activebackground='gray1',highlightthickness=5,overrelief=RAISED, highlightcolor='goldenrod', text='New game',font=("Times", 12, "bold"),width=10, padx=10, pady=10,command= lambda: menub(0))
        loadb=Button(menu1, relief=FLAT, bg='gray1', fg='goldenrod', activebackground='gray1',highlightthickness=5,overrelief=RAISED, highlightcolor='goldenrod', text='Load game',font=("Times", 12, "bold"),width=10, padx=10, pady=10,command= lambda: menub(1))
        saveb=Button(menu1, relief=FLAT, bg='gray1', fg='goldenrod', activebackground='gray1',highlightthickness=5,overrelief=RAISED, highlightcolor='goldenrod', text='Save',font=("Times", 12, "bold"),width=10, padx=10, pady=10,command= lambda:savegame)
        tutb=Button(menu1, relief=FLAT, bg='gray1', fg='goldenrod',activebackground='gray1',highlightthickness=5, overrelief=RAISED,  highlightcolor='goldenrod', text='How To Play',font=("Times", 12, "bold"),width=10, padx=10, pady=10,command= lambda: menub(2))
        centerinator=Label(menu1,bg='gray1',image=imgs.blank,height=200,width=1500)
        centerinator.grid(row=0,column=0,columnspan=3)
        newb.grid(row=2, column=1,padx=100,pady=10)
        loadb.grid(row=3, column=1,padx=100,pady=10)
        saveb.grid(row=4, column=1,padx=100,pady=10)
        tutb.grid(row=5, column=1,padx=100,pady=10)
        textbox=Label(menu1,bg='gray1',fg='goldenrod', text='Terra To Infinity', font=("Times", 80, "bold"))
        textbox.grid(row=1,column=1, padx=10, pady=10)
class solar:
    def __init__(self,p1,p2,p3,p4,p5=0,p6=0,p7=0,p8=0,p9=0,p10=0,p11=0,p12=0):
        self.savevalue=str(str(p1)+', '+str(p2)+', '+str(p3)+', '+str(p4)+', '+str(p5)+', '+str(p6)+', '+str(p7)+', '+str(p8)+', '+str(p9)+', '+str(p10)+', '+str(p11)+', '+str(p12))
        self.p1size=p1
        self.p2size=p2
        self.p3size=p3
        self.p4size=p4
        self.p5size=p5
        self.p6size=p6
        self.p7size=p7
        self.p8size=p8
        self.p9size=p9
        self.p10size=p10
        self.p11size=p11
        self.p12size=p12
    def build(self):
        global blank
        global frame1
        frame1=Frame(blank,bg='gray1')
        frame1.grid(row=1,column=0)
        b=1
        nextpsize=self.p1size
        val=0
        while nextpsize!=0:
            name=str('B'+str(val))
            Cname=str('P'+str(val))
            truesize=sizeparse(nextpsize)
            string='sol[1].'+str(Cname)+'=Planet(sol[1],'+str(truesize)+',"sol[1].'+str(Cname)+'")'
            exec(string)
            systemBuild(self,name,nextpsize,val)
            val=val+1
            nextpsize=eval('self.p'+str(val+1)+'size')
            spacewidth=((14-val)*100)
            space=Label(frame1,bg='gray1',image=sunpic,anchor=E, height=800, width=spacewidth)
        space.grid(row=0, rowspan=5,column=0)
def back():
    if info.currentpage=='solar':
        info.currentpage='menu'
    elif info.currentpage=='planet':
        info.currentpage='solar'
    elif info.currentpage=='tutorial':
        info.currentpage='menu'
    screenwrite()
class infobar:
    def build():
        global blank
        global bar
        global infotext
        bar=Frame(blank, bg='gray1')
        string="Current System: solar(1)   \nT="+str(info.t)+"\nM="+str(info.materials)
        infotext= Label(bar,text=string, height=3,anchor=W,bg='gray1',fg='goldenrod',justify=LEFT,width=105,font=("Times", 15, "bold"))
        bar.grid(row=0,column=0,columnspan=100)
        infotext.grid(row=0,column=0)
        backB=Button(bar, relief=FLAT, bg='gray1', fg='goldenrod',highlightbackground='goldenrod', text='back',width=13, padx=10, pady=10,font=("Times", 15, "bold"),command= lambda:back())
        backB.grid(row=0,column=1)

    def refresh():
        global bar
        global infotext
        string="Current System: solar(1)   \nT="+str(info.t)+"\nM="+str(info.materials)
        infotext.destroy()
        infotext= Label(bar,text=string, height=3,anchor=W,bg='gray1',fg='goldenrod',justify=LEFT,width=105,font=("Times", 15, "bold"))
        infotext.grid(row=0,column=0)
def galaxyclick(event):
    global gmenu
    try:
        gmenu.post(event.x_root,event.y_root)
    finally:
        gmenu.grab_release()
class Galaxy:
    def build():
        global gmenu
        milkyway=Frame(root,bg='gray1')
        milkyway.grid(row=0,column=0)
        gmenu=Menu(milkyway,tearoff=0)
        gmenu.add_command(label='explore')
        galaxy=Label(milkyway, image=imgs.galaxy1, bg='gray1',width=1500,height=800)
        galaxy.grid(row=1,column=0)
        galaxy.bind("<Button-1>",galaxyclick)

def refreshbar():
    infobar.refresh()
    root.after(100,refreshbar)

def gametime():
    info.materials=info.materials+info.harvest
    if info.currentpage=='solar' or 'planet':
        refreshbar()
        root.after(10000,gametime)

def screenwrite():
    global blank
    blank.grid_forget()
    blank.destroy()
    blank=Frame(root,bg='gray1')
    blank.grid(row=0,column=0)
    if info.currentpage=='solar':
        infobar.build()
        gametime()
        sol[1].build()
    elif info.currentpage=='tutorial':
        pass
    elif info.currentpage=='menu':
        mainmenu.build()
    elif info.currentpage=='planet':
        infobar.build()
        gametime()
        pass
screenwrite()



mainloop()